scalar GraphQLDate

# Player
type Player {
	id: Int!
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	debt: Float!
	atGameNumber: Int!
	isDead: Boolean!
}
input PlayerInput {
	name: String
	dob: Int
	occupation: String
	address: String
	debt: Float
	atGameNumber: Int
	isDead: Boolean
}

# Worker
enum WorkerDuty {
	Manager
	Guard
	Utility
}
type Worker {
	id: Int!
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	duty: WorkerDuty!
}
input WorkerInput {
	name: String
	dob: Int
	occupation: String
	address: String
	duty: WorkerDuty
}

# Game
type Game {
	uuid: String!
	gameNo: Int!
	name: String!
	description: String!
	hasCovered: Boolean!
}

# Resolver
type QueryResolver {
	getAllPlayers: [Player!]!
	getAllWorkers: [Worker!]!
	getAllGames: [Game!]!
}
type MutationResolver {
	# Player
	deletePlayer(id: Int): Boolean!
	createPlayer(player: PlayerInput): Player!
	updatePlayer(id: Int, player: PlayerInput): Player!
	# Worker
	deleteWorker(id: Int): Worker!
	createWorker(worker: WorkerInput): Worker!
	updateWorker(id: Int, worker: WorkerInput): Worker!
}

# Schema
schema {
	query: QueryResolver
	mutation: MutationResolver
}
