scalar GraphQLDate
scalar GraphQLJSON

# Player
type Player {
	id: Int!
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	debt: Float!
	atGameNumber: Int!
	isDead: Boolean!
}
input PlayerCreateInput {
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	debt: Float!
	atGameNumber: Int
	isDead: Boolean
}
input PlayerUpdateInput {
	name: String
	dob: GraphQLDate
	occupation: String
	address: String
	debt: Float
	atGameNumber: Int
	isDead: Boolean
}

# Worker
enum WorkerDuty {
	Manager
	Guard
	Utility
}
type Worker {
	id: Int!
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	duty: WorkerDuty!
}
input WorkerCreateInput {
	name: String!
	dob: GraphQLDate!
	occupation: String!
	address: String!
	duty: WorkerDuty!
}
input WorkerUpdateInput {
	name: String
	dob: GraphQLDate
	occupation: String
	address: String
	duty: WorkerDuty
}

# Game
type Game {
	uuid: String!
	gameNo: Int!
	name: String!
	description: String!
	hasCovered: Boolean!
	bets: GraphQLJSON
}

# Resolver
type QueryResolver {
	getAllPlayers: [Player!]!
	getAllWorkers: [Worker!]!
	getAllGames: [Game!]!
	getReport: GraphQLJSON!
}
type MutationResolver {
	# Player
	deletePlayer(id: Int): Boolean!
	createPlayer(player: PlayerCreateInput): Player!
	updatePlayer(id: Int, player: PlayerUpdateInput): Player!
	# Worker
	deleteWorker(id: Int): Boolean!
	createWorker(worker: WorkerCreateInput): Worker!
	updateWorker(id: Int, worker: WorkerUpdateInput): Worker!
	# Game
	moveToNextGame: [Game!]!
	updateGameBets(id: Int, bets: GraphQLJSON): Game!
}

# Schema
schema {
	query: QueryResolver
	mutation: MutationResolver
}
